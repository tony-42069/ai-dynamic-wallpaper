Config File:

{
    "api_settings": {
        "api_key": "8188616a-0587-4268-9816-48189620b1dd",
        "width": 1440,
        "height": 896
    },
    "schedule": {
        "daily_update_time": "00:00",
        "backup_interval_hours": 8
    },
    "storage": {
        "keep_images_days": 7
    },
    "prompts": {
        "scenes": [
            "a majestic mountain range at sunset with dramatic clouds",
            "an ethereal forest with bioluminescent plants and floating lights",
            "a futuristic cityscape with neon lights reflecting off glass buildings",
            "an abstract cosmic scene with swirling galaxies and nebulas",
            "a serene Japanese garden with cherry blossoms and a stone path",
            "geometric patterns flowing through space with dynamic lighting",
            "a mystical underwater city with crystal structures and glowing coral",
            "an enchanted library with floating books and magical particles",
            "a minimalist landscape with perfect symmetry and soft gradients",
            "a cyberpunk street scene with holographic advertisements"
        ],
        "styles": [
            "in a cinematic style with dramatic lighting",
            "with volumetric fog and ray tracing",
            "rendered in stunning 8K detail",
            "with hyperrealistic textures",
            "in an ethereal dreamlike style",
            "with perfect composition for desktop wallpaper",
            "with rich atmospheric depth",
            "featuring dynamic color harmonies",
            "with subtle sacred geometry elements",
            "optimized for wide screen display"
        ]
    },
    "custom_prompts": []
}


-----------------------------------------

Updated Wallpaper Generated with Config Support

import os
import time
import requests
import schedule
from datetime import datetime
import platform
import random
import ctypes
from pathlib import Path
import json

class FluxWallpaperManager:
    def __init__(self):
        """Initialize the wallpaper manager with configuration"""
        self.base_path = Path(r"C:\Users\dsade\OneDrive\Desktop\Business\AI\Wallpaper App")
        self.config_path = self.base_path / "config.json"
        self.images_path = self.base_path / "generated_images"
        self.logs_path = self.base_path / "logs"
        
        # Load configuration
        self.load_config()
        
        # API endpoints
        self.generation_endpoint = "https://api.bfl.ml/v1/flux-pro-1.1"
        self.result_endpoint = "https://api.bfl.ml/v1/get_result"
        
        # Create necessary directories
        self.images_path.mkdir(parents=True, exist_ok=True)
        self.logs_path.mkdir(parents=True, exist_ok=True)
        
        # Setup logging
        self.log_file = self.logs_path / f"wallpaper_log_{datetime.now().strftime('%Y%m%d')}.txt"

    def load_config(self):
        """Load configuration from file or create default"""
        if not self.config_path.exists():
            # Create default config if it doesn't exist
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(DEFAULT_CONFIG, f, indent=4)
            self.config = DEFAULT_CONFIG
        else:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                self.config = json.load(f)

    def save_config(self):
        """Save current configuration to file"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, indent=4)

    def add_custom_prompt(self, prompt):
        """Add a custom prompt to the configuration"""
        self.config['custom_prompts'].append(prompt)
        self.save_config()

    def generate_prompt(self):
        """Generate a random prompt using configuration"""
        # If there are custom prompts, use them 30% of the time
        if self.config['custom_prompts'] and random.random() < 0.3:
            prompt = random.choice(self.config['custom_prompts'])
            self.log_event(f"Using custom prompt: {prompt}")
            return prompt
        
        scene = random.choice(self.config['prompts']['scenes'])
        style = random.choice(self.config['prompts']['styles'])
        prompt = f"{scene}, {style}, masterpiece quality, perfect for desktop wallpaper"
        self.log_event(f"Generated prompt: {prompt}")
        return prompt

    # ... [rest of the methods remain the same until main()]

def main():
    manager = FluxWallpaperManager()
    
    # Schedule updates based on configuration
    schedule.every().day.at(manager.config['schedule']['daily_update_time']).do(
        manager.update_wallpaper
    )
    schedule.every(manager.config['schedule']['backup_interval_hours']).hours.do(
        manager.update_wallpaper
    )
    
    # Run initial update
    manager.update_wallpaper()
    
    # Keep the script running
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main()